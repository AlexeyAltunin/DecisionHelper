//
//  DecisionHelperUITests.swift
//  DecisionHelperUITests
//
//  Created by ALEXEY ALTUNIN on 14/01/2018.
//  Copyright ¬© 2018 ALEXEY ALTUNIN. All rights reserved.
//

import XCTest

class DecisionHelperUITests: XCTestCase {
        
    override func setUp() {
        super.setUp()
        
        // Put setup code here. This method is called before the invocation of each test method in the class.
        
        // In UI tests it is usually best to stop immediately when a failure occurs.
        continueAfterFailure = false
        // UI tests must launch the application that they test. Doing this in setup will make sure it happens for each test method.
        XCUIApplication().launch()

        // In UI tests it‚Äôs important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    func testExample() {
        // Use recording to get started writing UI tests.
        // Use XCTAssert and related functions to verify your tests produce the correct results.
    }
    
    func testGetDecision() {
        let app = XCUIApplication()
            
        app.buttons["–ù–∞—á–∞—Ç—å"].tap()
        
        let tablesQuery = app.tables
        
        // Step 1
        tablesQuery/*@START_MENU_TOKEN@*/.textFields["–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 1"]/*[[".cells.textFields[\"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 1\"]",".textFields[\"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 1\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        tablesQuery.children(matching: .cell).element(boundBy: 0).children(matching: .textField).element.typeText("–ì–µ—Ä–º–∞–Ω–∏—è")
        
        tablesQuery/*@START_MENU_TOKEN@*/.textFields["–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 2"]/*[[".cells.textFields[\"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 2\"]",".textFields[\"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 2\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        tablesQuery.children(matching: .cell).element(boundBy: 1).children(matching: .textField).element.typeText("–®–≤–µ–π—Ü–∞—Ä–∏—è")
        
        tablesQuery/*@START_MENU_TOKEN@*/.textFields["–ö—Ä–∏—Ç–µ—Ä–∏–π 1"]/*[[".cells.textFields[\"–ö—Ä–∏—Ç–µ—Ä–∏–π 1\"]",".textFields[\"–ö—Ä–∏—Ç–µ—Ä–∏–π 1\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        let cell = tablesQuery.children(matching: .cell).element(boundBy: 5)
        cell.children(matching: .textField).element.typeText("–ü—Ä–∏—Ä–æ–¥–∞")
        cell/*@START_MENU_TOKEN@*/.buttons["‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è"]/*[[".segmentedControls.buttons[\"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\"]",".buttons[\"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        
        tablesQuery/*@START_MENU_TOKEN@*/.textFields["–ö—Ä–∏—Ç–µ—Ä–∏–π 2"]/*[[".cells.textFields[\"–ö—Ä–∏—Ç–µ—Ä–∏–π 2\"]",".textFields[\"–ö—Ä–∏—Ç–µ—Ä–∏–π 2\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        let cell2 = tablesQuery.children(matching: .cell).element(boundBy: 6)
        cell2.children(matching: .textField).element.typeText("–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
        cell2/*@START_MENU_TOKEN@*/.buttons["‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è"]/*[[".segmentedControls.buttons[\"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\"]",".buttons[\"‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        
        tablesQuery.textFields["–ö—Ä–∏—Ç–µ—Ä–∏–π 3"].tap()
        let cell3 = tablesQuery.children(matching: .cell).element(boundBy: 7)
        cell3.children(matching: .textField).element.typeText("–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤")
        cell3/*@START_MENU_TOKEN@*/.buttons["‚≠êÔ∏è‚≠êÔ∏è"]/*[[".segmentedControls.buttons[\"‚≠êÔ∏è‚≠êÔ∏è\"]",".buttons[\"‚≠êÔ∏è‚≠êÔ∏è\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        
        app.navigationBars["–®–∞–≥ 1"].buttons["–î–∞–ª–µ–µ"].tap()
        
        // Step 2
        tablesQuery.staticTexts["–ö—Ä–∏—Ç–µ—Ä–∏–π: –ü—Ä–∏—Ä–æ–¥–∞"].tap()
        let reorderButton2 = tablesQuery.children(matching: .cell).matching(identifier: "–®–≤–µ–π—Ü–∞—Ä–∏—è, –ú–µ—Å—Ç–æ 2").element(boundBy: 2).buttons["Reorder –®–≤–µ–π—Ü–∞—Ä–∏—è, –ú–µ—Å—Ç–æ 2"]
        let reorderButton1 = tablesQuery.children(matching: .cell).matching(identifier: "–ì–µ—Ä–º–∞–Ω–∏—è, üîù –ú–µ—Å—Ç–æ 1").element(boundBy: 2).buttons["Reorder –ì–µ—Ä–º–∞–Ω–∏—è, üîù –ú–µ—Å—Ç–æ 1"]
        reorderButton2.press(forDuration: 2, thenDragTo: reorderButton1)
        
        tablesQuery.cells.containing(.button, identifier:"Reorder –®–≤–µ–π—Ü–∞—Ä–∏—è, üîù –ú–µ—Å—Ç–æ 1").staticTexts["–®–≤–µ–π—Ü–∞—Ä–∏—è"].tap()
        tablesQuery.cells.containing(.button, identifier:"Reorder –ì–µ—Ä–º–∞–Ω–∏—è, –ú–µ—Å—Ç–æ 2").staticTexts["–ì–µ—Ä–º–∞–Ω–∏—è"].tap()
       
        app.navigationBars["–®–∞–≥ 2"].buttons["–†–µ–∑—É–ª—å—Ç–∞—Ç"].tap()
        
        // Result
        tablesQuery/*@START_MENU_TOKEN@*/.staticTexts["–û—á–∫–æ–≤: 1.667"]/*[[".cells.staticTexts[\"–û—á–∫–æ–≤: 1.667\"]",".staticTexts[\"–û—á–∫–æ–≤: 1.667\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        tablesQuery/*@START_MENU_TOKEN@*/.staticTexts["–û—á–∫–æ–≤: 1.333"]/*[[".cells.staticTexts[\"–û—á–∫–æ–≤: 1.333\"]",".staticTexts[\"–û—á–∫–æ–≤: 1.333\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app.navigationBars["–†–µ–∑—É–ª—å—Ç–∞—Ç"].buttons["–ó–∞–≤–µ—Ä—à–∏—Ç—å"].tap()
    }
    
}
